import { db } from './src/config/database'
import { categories } from './src/db/schema/categories'
import { products } from './src/db/schema/products'
import { reviews } from './src/db/schema/reviews'
import { users } from './src/db/schema/users'
import { addresses } from './src/db/schema/addresses'
import { viewed_products } from './src/db/schema/viewedProducts'
import { saves } from './src/db/schema/saves'

// --- Enhanced Sample Data ---

const weights = [100, 250, 500, 1000]
const features = [
  '100% Organic',
  'Rich in Antioxidants',
  'High in Fiber',
  'Gluten-Free',
  'Source of Healthy Fats',
  'Boosts Immunity',
]
const origins = ['Afghanistan', 'India', 'Iran', 'Turkey', 'USA', 'Spain']
const instructionsList = [
  'Store in a cool, dry place.',
  'Consume a handful daily for best results.',
  'Can be added to salads, smoothies, or desserts.',
  'Soak overnight before consumption.',
]
const priceUnits = ['kg', 'gr']

const sampleImages = [
  'https://banners.drukhshan.com/imagesOfAmazon/greenShirt.png',
  'https://banners.drukhshan.com/imagesOfAmazon/Rectangle 8.png',
  'https://banners.drukhshan.com/imagesOfAmazon/blueCoat.png',
  'https://banners.drukhshan.com/imagesOfAmazon/blueShirt.png',
  'https://banners.drukhshan.com/imagesOfAmazon/duplicate.png',
  'https://banners.drukhshan.com/imagesOfAmazon/greenHat.png',
  'https://banners.drukhshan.com/imagesOfAmazon/greenShirt.png',
  'https://banners.drukhshan.com/imagesOfAmazon/pinkHap.png',
  'https://banners.drukhshan.com/imagesOfAmazon/whiteShirt.png',
]

const usersSeed = [
  {
    id: 'elyas742',
    user_name: 'elyas_ahmad',
    email: 'elyas.ahmad@example.com',
    profile: 'https://randomuser.me/api/portraits/men/1.jpg',
    country: 'Afghanistan',
    phone_number: '123456789',
  },
  {
    id: 'sami742',
    user_name: 'sami_g',
    email: 'sami.g@example.com',
    profile: 'https://randomuser.me/api/portraits/men/2.jpg',
    country: 'Afghanistan',
    phone_number: '123456789',
  },
  {
    id: 'fatima_k',
    user_name: 'fatima_k',
    email: 'fatima.k@example.com',
    profile: 'https://randomuser.me/api/portraits/women/1.jpg',
    country: 'Afghanistan',
    phone_number: '123456789',
  },
  {
    id: 'ahmad_w',
    user_name: 'ahmad_w',
    email: 'ahmad.w@example.com',
    profile: 'https://randomuser.me/api/portraits/men/3.jpg',
    country: 'Afghanistan',
    phone_number: '123456789',
  },
]

const reviewComments = [
  'Excellent quality, will definitely buy again!',
  'Very fresh and tasty. Highly recommended.',
  'Good value for the price. The packaging was also great.',
  'Not what I expected, but still a decent product.',
  'Arrived on time and in perfect condition.',
  'A staple in my pantry now. Love it!',
  'Could be better, the taste was a bit off.',
]

const productTemplates = {
  Nuts: [
    {
      name: 'Raw Almonds',
      description: 'Premium quality raw almonds, perfect for a healthy snack.',
    },
    {
      name: 'Walnuts',
      description: 'Fresh and crunchy walnuts, great for baking and snacking.',
    },
    {
      name: 'Pistachios',
      description: 'Lightly salted and roasted pistachios.',
    },
  ],
  Seeds: [
    {
      name: 'Chia Seeds',
      description: 'Organic chia seeds, packed with omega-3 and fiber.',
    },
    {
      name: 'Flax Seeds',
      description:
        'Golden flax seeds, a great addition to your morning smoothie.',
    },
    {
      name: 'Sunflower Seeds',
      description: 'Roasted and salted sunflower seeds.',
    },
  ],
  'Dry Fruits': [
    {
      name: 'Medjool Dates',
      description: 'Sweet and succulent Medjool dates from the finest palms.',
    },
    {
      name: 'Dried Apricots',
      description: 'Naturally sweet and chewy dried apricots.',
    },
    { name: 'Golden Raisins', description: 'Plump and juicy golden raisins.' },
  ],
  'Spices & Herbs': [
    {
      name: 'Saffron Threads',
      description: 'Premium quality saffron for aromatic and flavorful dishes.',
    },
    {
      name: 'Turmeric Powder',
      description: 'Organic turmeric powder with high curcumin content.',
    },
    {
      name: 'Cinnamon Sticks',
      description: 'Aromatic cinnamon sticks for your culinary creations.',
    },
  ],
}

// --- Helper Functions ---

const getRandomItem = <T>(arr: T[]): T =>
  arr[Math.floor(Math.random() * arr.length)]

const getRandomSubarray = <T>(arr: T[], maxSize: number): T[] => {
  const shuffled = [...arr].sort(() => 0.5 - Math.random())
  const size = Math.floor(Math.random() * maxSize) + 1 // ensures at least 1
  return shuffled.slice(0, Math.min(size, arr.length))
}

// --- Main Seeding Function ---

async function autoGenerateData(productCount: number) {
  try {
    console.log('Deleting existing data...')
    await db.delete(viewed_products)
    await db.delete(reviews)
    await db.delete(addresses)
    await db.delete(products)
    await db.delete(users)
    await db.delete(categories)
    await db.delete(saves)
    console.log('All existing data deleted.')

    console.log('Inserting categories...')
    const categoryValues = Object.keys(productTemplates).map((name, index) => ({
      id: index + 1,
      name,
    }))
    const insertedCategories = await db
      .insert(categories)
      .values(categoryValues)
      .returning({ id: categories.id, name: categories.name })
    console.log('Categories inserted.')

    console.log('Inserting users...')
    const insertedUsers = await db.insert(users).values(usersSeed).returning()
    console.log('Users inserted.')

    console.log(`Inserting ${productCount} products...`)
    const productData = []
    for (let i = 0; i < productCount; i++) {
      const category = getRandomItem(insertedCategories)
      const templates =
        productTemplates[category.name as keyof typeof productTemplates] || []
      const template = getRandomItem(templates) || {
        name: 'Generic Product',
        description: 'A fine product.',
      }

      productData.push({
        name: `${template.name} ${i + 1}`,
        description: template.description,
        price: `${5 + Math.floor(Math.random() * 50)}`,
        price_unit: getRandomItem(priceUnits),
        weights: getRandomSubarray(weights, 5),
        features: getRandomSubarray(features, 5),
        origin: getRandomItem(origins),
        instructions: getRandomItem(instructionsList),
        category_id: category.id,
        images: getRandomSubarray(sampleImages, 5),
        popular: getRandomItem([true, false]),
      })
    }
    const insertedProducts = await db
      .insert(products)
      .values(productData)
      .returning({ id: products.id })
    console.log('Products inserted.')

    console.log('Inserting reviews...')

    // Create all possible user-product pairs for reviews
    const allPossiblePairs = insertedProducts.flatMap((product) =>
      usersSeed.map((user) => ({
        product_id: product.id,
        user_id: user.id,
      }))
    )

    // Shuffle the pairs to get random reviews
    for (let i = allPossiblePairs.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[allPossiblePairs[i], allPossiblePairs[j]] = [
        allPossiblePairs[j],
        allPossiblePairs[i],
      ]
    }

    // Take a slice of the unique pairs (e.g., 40 or less if not enough pairs)
    const uniqueReviewPairs = allPossiblePairs.slice(
      0,
      Math.min(40, allPossiblePairs.length)
    )

    const reviewData = uniqueReviewPairs.map((pair) => ({
      ...pair,
      rating: String(Math.floor(Math.random() * 5) + 1),
      comment: getRandomItem(reviewComments),
      images: getRandomSubarray(sampleImages, 3),
    }))

    if (reviewData.length > 0) {
      await db.insert(reviews).values(reviewData)
      console.log('Reviews inserted.')
    } else {
      console.log('No reviews to insert.')
    }

    console.log('Inserting addresses...')
    const addressData = usersSeed.map((user) => ({
      user_id: String(user.id),
      address_name: 'Home',
      full_name: user.user_name.replace('_', ' '),
      street_address: `${Math.floor(Math.random() * 100) + 1} Main St`,
      apartment: `Apt ${Math.floor(Math.random() * 20) + 1}`,
      city: 'Kabul',
      province: 'Kabul',
      zip_code: '1001',
      country: 'Afghanistan',
      state: 'Kabul',
      phone_number: '123456789',
      is_default: true,
    }))
    await db.insert(addresses).values(addressData)
    console.log('Addresses inserted.')

    console.log('Inserting viewed products...')

    // Create all possible user-product pairs for viewed products
    const allPossibleViewedPairs = insertedProducts.flatMap((product) =>
      usersSeed.map((user) => ({
        product_id: product.id,
        user_id: user.id,
      }))
    )

    // Shuffle the pairs to get random viewed products
    for (let i = allPossibleViewedPairs.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[allPossibleViewedPairs[i], allPossibleViewedPairs[j]] = [
        allPossibleViewedPairs[j],
        allPossibleViewedPairs[i],
      ]
    }

    // Take a slice of the unique pairs (e.g., 25 or less)
    const viewedData = allPossibleViewedPairs.slice(
      0,
      Math.min(25, allPossibleViewedPairs.length)
    )

    if (viewedData.length > 0) {
      await db.insert(viewed_products).values(viewedData)
      console.log('Viewed products inserted.')
    } else {
      console.log('No viewed products to insert.')
    }

    console.log('Inserting saves...')
    const saveData = insertedUsers
      .filter((user) => user.id === 'elyas742')
      .flatMap((user) =>
        insertedProducts.map((product) => ({
          user_id: user.id,
          product_id: product.id,
        }))
      )

    if (saveData.length > 0) {
      await db.insert(saves).values(saveData)
      console.log('Saves inserted.')
    } else {
      console.log('No saves to insert.')
    }

    console.log('Inserting reviews for one user ...')

    await generateManyReviews('elyas742', 551, 1)
    console.log('All data generated successfully 🎉')
  } catch (error) {
    console.error('Data generation failed:', error)
  }
}

autoGenerateData(50)

const generateManyReviews = async (
  userId: string,
  productId: number,
  count: number
) => {
  const reviewData = Array.from({ length: count }, (_, index) => ({
    user_id: userId,
    product_id: productId,
    rating: Math.floor(Math.random() * 5) + 1,
    comment: getRandomItem(reviewComments),
    images: getRandomSubarray(sampleImages, 3),
  }))

  console.log(reviewData)

  if (reviewData.length > 0) {
    await db.insert(reviews).values(reviewData)
    console.log('Reviews inserted.')
  } else {
    console.log('No reviews to insert.')
  }
}
